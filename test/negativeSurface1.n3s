@prefix : <urn:example:> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .

:Alice :sibling :Bob .
:Bob :sibling :Charly .

:Hans :sibling :Mary .
:Mary :sibling :Agnes .

# (_:X _:Y) is like For all X and Y) within the surface
# log:nand claims the RDF graph on the surface
# is false.
#
# To have a NOT in a logic is quite powerfull. The implication
# P -> Q is equivalent to ~P OR Q . Keeping this in mind
# we can construct implication from nands.
#
# E.g. using De Morgan's laws
#
# ~( P -> Q ) <=> ~(~P OR Q) <=> ~~P AND ~Q  <=> P AND ~Q 
#    
# from which follows:
#
# ( P -> Q ) <=> ~( P AND ~Q ) 
#
# Which means we can nest log:nand to express P -> Q
#   
# What in N3 was:
#    { ?X a ?Y } => { ?Y a :Test } .
# is in blogic
#    (_:X _:Y) log:nand {
#       _:X a _:Y .
#       () log:nand  {
#           _:Y a :Test .
#       } .
#    } .
(_:X _:Y _:Z) log:nand {
    _:X :sibling _:Y .
    _:Y :sibling _:Z .

    () log:nand {
        _:X :sibling _:Z .
    } .
} .

# Filter out what to see in the output 
# ( _:P _:O ) is for all P and O in log:onQuerySurface 
# return only the triples matching 
{
    ?S :sibling  ?O . 
} 
log:query
{
    ?S :sibling  ?O . 
} .

# Test
() log:nand {
    :Alice :sibling :Charly .
    :Hans :sibling :Agnes .
    () log:nand {
        :test :is true .
    } .
} .

{ :test :is true } log:query { :test :is true } .
