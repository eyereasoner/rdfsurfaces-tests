# ------------------------
# Universal Turing machine
# ------------------------
#
# See https://en.wikipedia.org/wiki/Universal_Turing_machine

@prefix log: <http://www.w3.org/2000/10/swap/log#>.
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix : <urn:example:>.

# interpreter for Univeral Turing Machine
(_:OutTape _:Machine _:I) log:nand {
    () log:nano {
        () :compute _:OutTape.
    }.
    _:Machine :start _:I.
    (_:I () "#" ()) :find _:OutTape.
}.

(_:List _:OutTape _:Head _:Tail _:Machine _:I) log:nand {
    () log:nano {
        _:List :compute _:OutTape.
    }.
    _:List list:firstRest (_:Head _:Tail).
    _:Machine :start _:I.
    (_:I () _:Head _:Tail) :find _:OutTape.
}.

(_:State _:Left _:Cell _:Right _:OutTape _:Write _:Move _:Next _:A _:B _:C) log:nand {
    () log:nano {
        (_:State _:Left _:Cell _:Right) :find _:OutTape.
    }.
    (_:State _:Cell _:Write _:Move) :tape _:Next.
    (_:Move _:Left _:Write _:Right _:A _:B _:C) :move true.
    (_:Next _:A _:B _:C) :continue _:OutTape.
}.

(_:Left _:Cell _:Right _:OutTape _:R _:List) log:nand {
    () log:nano {
        (:halt _:Left _:Cell _:Right) :continue _:OutTape.
    }.
    _:Left :reverse _:R.
    _:List list:firstRest (_:Cell _:Right).
    (_:R _:List) list:append _:OutTape.
}.

(_:State _:Left _:Cell _:Right _:OutTape) log:nand {
    () log:nano {
        (_:State _:Left _:Cell _:Right) :continue _:OutTape.
    }.
    (_:State _:Left _:Cell _:Right) :find _:OutTape.
}.

(_:Cell _:Right _:L) log:nand {
    () log:nano {
        (:left () _:Cell _:Right () "#" _:L) :move true.
    }.
    _:L list:firstRest (_:Cell _:Right).
}.

(_:List _:Cell _:Right _:Tail _:Head _:L) log:nand {
    () log:nano {
        (:left _:List _:Cell _:Right _:Tail _:Head _:L) :move true.
    }.
    _:List list:firstRest (_:Head _:Tail).
    _:L list:firstRest (_:Cell _:Right).
}.

(_:Left _:Cell _:Right) log:nand {
    () log:nano {
        (:stop _:Left _:Cell _:Right _:Left _:Cell _:Right) :move true.
    }.
}.

(_:Left _:Cell _:L) log:nand {
    () log:nano {
        (:right _:Left _:Cell () _:L "#" ()) :move true.
    }.
    _:L list:firstRest (_:Cell _:Left).
}.

(_:Left _:Cell _:List _:L _:Head _:Tail) log:nand {
    () log:nano {
        (:right _:Left _:Cell _:List _:L _:Head _:Tail) :move true.
    }.
    _:List list:firstRest (_:Head _:Tail).
    _:L list:firstRest (_:Cell _:Left).
}.

() log:nand {
    () log:nano {
        () :reverse ().
    }.
}.

(_:List _:Reverse _:Head _:Tail _:R) log:nand {
    () log:nano {
        _:List :reverse _:Reverse.
    }.
    _:List list:firstRest (_:Head _:Tail).
    _:Tail :reverse _:R.
    (_:R (_:Head)) list:append _:Reverse.
}.

# a Turing machine to add 1 to a binary number
:add1 :start 0.

(0 0 0 :right) :tape 0.
(0 1 1 :right) :tape 0.
(0 "#" "#" :left) :tape 1.
(1 0 1 :stop) :tape :halt.
(1 1 0 :left) :tape 1.
(1 "#" 1 :stop) :tape :halt.

# query
() log:nand {
    (1 0 1 0 0 1) :compute (1 0 1 0 1 0 "#").
    (1 0 1 1 1 1) :compute (1 1 0 0 0 0 "#").
    (1 1 1 1 1 1) :compute (1 0 0 0 0 0 0 "#").
    () :compute (1 "#").
    () log:nans {
        :test :is true.
    }.
}.
