% -------------------------------------
% RDF Surfaces EYE plugin -- Jos De Roo
% -------------------------------------

:- dynamic('<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'/2).
:- dynamic('<http://www.w3.org/2000/10/swap/log#onQuerySurface>'/2).

:-
    % options
    (   flag(nope)
    ->  true
    ;   assertz(flag(nope)),
        assertz(flag(explain))
    ),

    % assert positive surfaces
    assertz(implies((
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'([], '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'([], G)),
            \+call(G)
            ), G, '<void>')),

    % simplify negative surfaces
    assertz(implies((
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G),
            getlist(V, Vl),
            is_list(Vl),
            is_graph(G),
            conj_list(G, L),
            list_to_set(L, B),
            select('<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(Z, H), B, K),
            getlist(Z, Zl),
            is_list(Zl),
            is_graph(H),
            conj_list(H, M),
            list_to_set(M, T),
            select('<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(W, O), T, N),
            getlist(W, Wl),
            is_list(Wl),
            is_graph(O),
            (   conj_list(O, D),
                append(K, D, E),
                conj_list(C, E)
            ;   length(K, I),
                I > 1,
                conj_list(F, N),
                conj_list(C, ['<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'([], F)|K])
            ),
            findvars(H, R, beta),
            intersection(Zl, R, X),
            X = [],
            findvars(O, S, beta),
            intersection(Wl, S, Y),
            append([Vl, X, Y], U),
            (   flag(explain)
            ->  remember(answer('<http://www.w3.org/2000/10/swap/log#explains>',
                                '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G),
                                '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(U, C)))
            ;   true
            )), '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(U, C), '<void>')),

    % resolve negative surfaces
    assertz(implies((
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G),
            getlist(V, Vl),
            is_list(Vl),
            is_graph(G),
            conj_list(G, L),
            list_to_set(L, B),
            \+member('<http://www.w3.org/2000/10/swap/log#onNegativeComponentSurface>'(_, _), B),
            \+member('<http://www.w3.org/2000/10/swap/log#onNegativeAnswerSurface>'(_, _), B),
            findall(1,
                (   member('<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(_, _), B)
                ),
                O
            ),
            length(O, E),
            length(B, D),
            (   memberchk(E, [0, 2, D])
            ;   E = 1,
                D < 4
            ),
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(W, F),
            getlist(W, Wl),
            is_list(Wl),
            is_graph(F),
            conj_list(F, K),
            list_to_set(K, N),
            \+member('<http://www.w3.org/2000/10/swap/log#onNegativeComponentSurface>'(_, _), N),
            \+member('<http://www.w3.org/2000/10/swap/log#onNegativeAnswerSurface>'(_, _), N),
            length(N, 2),
            makevars(N, J, beta(Wl)),
            select('<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(U, C), J, [P]),
            getlist(U, Ul),
            is_list(Ul),
            is_graph(C),
            (   select('<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(Z, Q), B, A),
                M = ['<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(Ul, C)|A],
                conj_list(Q, R),
                memberchk(P, R)
            ;   select(Q, B, A),
                M = [P|A],
                conj_list(C, R),
                memberchk(Q, R)
            ),
            list_to_set(M, T),
            conj_list(H, T),
            ground('<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(Vl, H)),
            (   flag(explain)
            ->  remember(answer('<http://www.w3.org/2000/10/swap/log#explains>',
                                ['<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G), '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(W, F)],
                                '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(Vl, H)))
            ;   true
            )), '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(Vl, H), '<void>')),

    % convert negative surfaces to forward rules
    assertz(implies((
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G),
            getlist(V, Vl),
            is_list(Vl),
            is_graph(G),
            conj_list(G, L),
            list_to_set(L, B),
            \+member('<http://www.w3.org/2000/10/swap/log#onNegativeComponentSurface>'(_, _), B),
            \+member('<http://www.w3.org/2000/10/swap/log#onNegativeAnswerSurface>'(_, _), B),
            select('<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(_, H), B, K),
            conj_list(R, K),
            checkvars(K),
            makevars([R, H], [Q, S], beta(Vl)),
            findvars(S, W, beta),
            makevars(S, I, beta(W)),
            (   flag(explain)
            ->  conj_append(I, remember(answer('<http://www.w3.org/2000/10/swap/log#explains>', ['<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G), Q], I)), Ie)
            ;   Ie = I
            )), '<http://www.w3.org/2000/10/swap/log#implies>'(Q, Ie), '<void>')),

    % convert negative surfaces to forward contrapositive rules
    assertz(implies((
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G),
            getlist(V, Vl),
            is_list(Vl),
            is_graph(G),
            conj_list(G, L),
            list_to_set(L, B),
            \+member('<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(_, _), B),
            \+member('<http://www.w3.org/2000/10/swap/log#onNegativeComponentSurface>'(_, _), B),
            \+member('<http://www.w3.org/2000/10/swap/log#onNegativeAnswerSurface>'(_, _), B),
            \+member(exopred(_, _, _), B),
            (   length(B, O),
                O =< 2
            ->  select(R, B, J),
                J \= []
            ;   B = [R|J]
            ),
            conj_list(T, J),
            findvars(R, N, beta),
            findall(A,
                (   member(A, Vl),
                    \+member(A, N)
                ),
                Z
            ),
            E = '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(Z, T),
            checkvars([R]),
            makevars([R, E], [Q, S], beta(Vl)),
            findvars(S, W, beta),
            makevars(S, I, beta(W)),
            (   flag(explain)
            ->  conj_append(I, remember(answer('<http://www.w3.org/2000/10/swap/log#explains>', ['<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G), Q], I)), Ie)
            ;   Ie = I
            )), '<http://www.w3.org/2000/10/swap/log#implies>'(Q, Ie), '<void>')),

    % convert negative surfaces to backward rules
    assertz(implies((
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G),
            getlist(V, Vl),
            is_list(Vl),
            is_graph(G),
            conj_list(G, L),
            list_to_set(L, B),
            select('<http://www.w3.org/2000/10/swap/log#onNegativeComponentSurface>'(_, T), B, K),
            conj_list(R, K),
            conjify(R, S),
            checkvars([R]),
            makevars([T, S], [Tu, Su], beta(Vl)),
            (   flag(explain)
            ->  conj_append(Su, remember(answer('<http://www.w3.org/2000/10/swap/log#explains>', ['<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G), Su], Tu)), Se)
            ;   Se = Su
            ),
            C = ':-'(Tu, Se),
            copy_term_nat(C, CC),
            labelvars(CC, 0, _, avar),
            (   \+cc(CC)
            ->  assertz(cc(CC)),
                assertz(C),
                retractall(brake)
            ;   true
            )), true, '<void>')),

    % convert negative surfaces to universal statements
    assertz(implies((
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G),
            getlist(V, Vl),
            is_list(Vl),
            Vl \= [],
            is_graph(G),
            conj_list(G, [G]),
            (   G = '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(Z, H)
            ->  is_list(Z)
            ;   Z = [],
                H = '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'([], G)
            ),
            findvars(H, R, beta),
            intersection(Z, R, X),
            conj_list(H, B),
            member(M, B),
            findall('<http://www.w3.org/2000/10/swap/log#skolem>'(Vl, W),
                (   member(W, X)
                ),
                Y
            ),
            conj_list(S, Y),
            append(Vl, X, U),
            makevars([M, S], [Mu, Su], beta(U)),
            (   flag(explain)
            ->  conj_append(Su, remember(answer('<http://www.w3.org/2000/10/swap/log#explains>', ['<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G), Su], Mu)), Se)
            ;   Se = Su
            ),
            C = ':-'(Mu, Se),
            copy_term_nat(C, CC),
            labelvars(CC, 0, _, avar),
            (   \+cc(CC)
            ->  assertz(cc(CC)),
                assertz(C),
                retractall(brake)
            ;   true
            )), true, '<void>')),

    % convert negative surfaces to answer rules
    assertz(implies((
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G),
            getlist(V, Vl),
            is_list(Vl),
            is_graph(G),
            conj_list(G, L),
            list_to_set(L, B),
            select('<http://www.w3.org/2000/10/swap/log#onNegativeAnswerSurface>'(_, H), B, K),
            conj_list(I, K),
            djiti_answer(answer(H), J),
            checkvars(K),
            makevars([I, J], [Iu, Ju], beta(Vl)),
            (   flag(explain)
            ->  conj_append(Ju, remember(answer('<http://www.w3.org/2000/10/swap/log#explains>', ['<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G), Iu], H)), Je)
            ;   Je = Ju
            ),
            C = implies(Iu, Je, '<void>'),
            copy_term_nat(C, CC),
            labelvars(CC, 0, _, avar),
            (   \+cc(CC)
            ->  assertz(cc(CC)),
                assertz(C),
                retractall(brake)
            ;   true
            )), true, '<void>')),

    % convert query surface
    assertz(implies((
            '<http://www.w3.org/2000/10/swap/log#onQuerySurface>'(V, G),
            getlist(V, Vl),
            is_list(Vl),
            is_graph(G),
            conj_list(G, L),
            append(L, ['<http://www.w3.org/2000/10/swap/log#onNegativeAnswerSurface>'([], G)], M),
            conj_list(H, M),
            (   flag(explain)
            ->  remember(answer('<http://www.w3.org/2000/10/swap/log#explains>',
                                '<http://www.w3.org/2000/10/swap/log#onQuerySurface>'(V, G),
                                '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(Vl, H)))
            ;   true
            )), '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(Vl, H), '<void>')),

    % blow inference fuse
    assertz(implies((
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(V, G),
            call((
                getlist(V, Vl),
                is_list(Vl),
                is_graph(G),
                conj_list(G, L),
                \+member('<http://www.w3.org/2000/10/swap/log#onNegativeComponentSurface>'(_, _), L),
                makevars(G, H, beta(Vl)),
                (   H = '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(_, false),
                    J = true
                ;   catch(call(H), _, false),
                    J = H
                ),
                (   H = '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(_, C)
                ->  I = '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(_, C)
                ;   I = H
                )
            )),
            J,
            '<http://www.w3.org/2000/10/swap/log#onNegativeSurface>'(_, I)
            ), false, '<void>')).
